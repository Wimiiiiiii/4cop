rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /sharedTasks/{taskId} {
      // Fonctions utilitaires
      function isProjectMember(projectId) {
        let project = get(/databases/$(database)/documents/projets/$(projectId)).data;
        return request.auth.uid == project.proprietaire || request.auth.uid in project.membres;
      }

      function isTaskMember() {
        return request.auth.uid in resource.data.assignedUserIds;
      }

      // Lecture : l'utilisateur doit être assigné à la tâche ou membre du projet
      allow read: if request.auth != null && 
        (isTaskMember() || isProjectMember(resource.data.projectId));
      
      // Écriture : l'utilisateur doit être membre du projet
      allow create: if request.auth != null && 
        isProjectMember(request.resource.data.projectId);
      
      allow update: if request.auth != null && 
        (resource.data.creatorId == request.auth.uid || isTaskMember());
      
      allow delete: if request.auth != null && 
        resource.data.creatorId == request.auth.uid;
    }

    match /pays/{paysId} {
      allow read, write: if request.auth != null;
    }

    match /ecoles/{ecoleId} {
      allow read, write: if request.auth != null;
    }

    match /competences/{competenceId} {
      allow read, write: if request.auth != null;
    }

    match /projets/{projetId} {
      allow read, write: if request.auth != null;
      
      match /candidatures/{candidatureId} {
        allow read, write: if request.auth != null;
      }
      
      match /membres/{membreId} {
        allow read, write: if request.auth != null;
      }
    }

    match /chats/{chatId} {
      allow read, write: if request.auth != null;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
      }
    }
  }
} 